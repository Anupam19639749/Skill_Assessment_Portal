// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skill_Assessment_Portal_Backend.Data;

#nullable disable

namespace Skill_Assessment_Portal_Backend.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250923064412_addedConstraint")]
    partial class addedConstraint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("InstructionsFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AssessmentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<int>("MaxMarks")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("QuestionId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<int>("TotalMarksObtained")
                        .HasColumnType("int");

                    b.Property<int>("UserAssessmentId")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.HasIndex("UserAssessmentId")
                        .IsUnique();

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Candidate"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Evaluator"
                        });
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<string>("AnswerFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("MarksObtained")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAssessmentId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserAssessmentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.UserAssessment", b =>
                {
                    b.Property<int>("UserAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAssessmentId"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserAssessmentId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId", "AssessmentId")
                        .IsUnique();

                    b.ToTable("UserAssessments");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Assessment", b =>
                {
                    b.HasOne("Skill_Assessment_Portal_Backend.Models.User", "Creator")
                        .WithMany("CreatedAssessments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Question", b =>
                {
                    b.HasOne("Skill_Assessment_Portal_Backend.Models.Assessment", "Assessment")
                        .WithMany("Questions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Result", b =>
                {
                    b.HasOne("Skill_Assessment_Portal_Backend.Models.UserAssessment", "UserAssessment")
                        .WithOne("Result")
                        .HasForeignKey("Skill_Assessment_Portal_Backend.Models.Result", "UserAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAssessment");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Submission", b =>
                {
                    b.HasOne("Skill_Assessment_Portal_Backend.Models.Question", "Question")
                        .WithMany("Submissions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Skill_Assessment_Portal_Backend.Models.UserAssessment", "UserAssessment")
                        .WithMany("Submissions")
                        .HasForeignKey("UserAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UserAssessment");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.User", b =>
                {
                    b.HasOne("Skill_Assessment_Portal_Backend.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.UserAssessment", b =>
                {
                    b.HasOne("Skill_Assessment_Portal_Backend.Models.Assessment", "Assessment")
                        .WithMany("UserAssessments")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skill_Assessment_Portal_Backend.Models.User", "User")
                        .WithMany("UserAssessments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Assessment", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserAssessments");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Question", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.User", b =>
                {
                    b.Navigation("CreatedAssessments");

                    b.Navigation("UserAssessments");
                });

            modelBuilder.Entity("Skill_Assessment_Portal_Backend.Models.UserAssessment", b =>
                {
                    b.Navigation("Result");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
